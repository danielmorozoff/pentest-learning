#!/usr/bin/python
import sys
import os
import traceback
import socket
import getopt
import threading
import subprocess
import signal


# globals
listen = False
command = False
upload = False
execute = ''
target = ''
up_dest = ''
port = 0

# Help method


def usage():
    print ('**MGCAT Tool**')

# Method to handle params


def h(arg2):
    usage()


def l(arg2):
    global listen
    listen = True


def e(arg2):
    global execute
    execute = arg2


def c(arg2):
    global command
    command = True


def u(arg2):
    global up_dest
    up_dest = arg2


def t(arg2):
    global target
    target = arg2


def p(arg2):
    global port
    port = int(arg2)


def __optionList(arg, arg2):
    switch = {
        '-h': h,
        '-l': l,
        '-e': e,
        '-c': c,
        '-u': u,
        '-t': t,
        '-p': p
    }

    return switch[arg](arg2)


def main():

    global listen
    global port
    global execute
    global command
    global up_dest
    global target

    if not len(sys.argv[1:]):
        usage()
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hle:t:p:cu:', [
                                   'help', 'listen', 'execute', 'target', 'port', 'command', 'upload'])
    except getopt.GetoptError as er:
        print str(er)
        usage()

    for o, a in opts:
        # print '%s %s' % (o,a)
        __optionList(o, a)

    if not listen and len(target) and port > 0:
        # print 'Sending data to %s' % target

        buf = raw_input('<MG:#> ')  # sys.stdin.read()

        # send data
        cli_send(buf)

    if listen:
        server_loop()


def cli_send(buffer):
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client.connect((target, port))
        if(len(buffer)):
            client.send(buffer + '\n')
        try:
            while True:
                # print('Waiting to receive')
                rec_len = 1
                resp = ""

                while rec_len:
                    data = client.recv(4096)
                    rec_len = len(data)
                    resp += data
                    if rec_len < 4096:
                        break

                    # print('rec_len: %d' % rec_len)

                print resp

                # print 'Give new data'
                # input wait
                buffer = raw_input('<MG:#> ')
                client.send(buffer + '\n')  # \n needed bc newline not passed
        except KeyboardInterrupt:
            print ('\n Exiting \n')
            # Kill current process running on system
            kill_server()
            client.close()
            sys.exit()
    except Exception as er:
        print '[*] Exception -- Exit'
        print str(er)
        print(traceback.format_exc())
        client.close()


def kill_server():
    print 'Killing main server process'
    out = run_command('lsof -i')
    print 'Searching for %s: ' % (target + ':' + str(port))
    for line in out.splitlines():
        if (target + ':' + str(port)) in line:
            pid = line.split('    ')[1].split(' ')[0]
            print 'killing: %s' % pid
            os.kill(int(pid), signal.SIGKILL)


def server_loop():
    global target

    if not len(target):
        target = "0.0.0.0"
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((target, port))
    server.listen(5)
    # print 'going into loop on %s:%s' % (target, port)
    while True:
        cli_soc, addr = server.accept()

        cli_thr = threading.Thread(target=cli_handler, args=(cli_soc,))
        cli_thr.start()


def run_command(command):
    com = command.rstrip()
    try:
        out = subprocess.check_output(
            com, stderr=subprocess.STDOUT, shell=True)
    except:
        out = 'Failed execution. \r\n'
    return out


def cli_handler(cli_soc):
    global upload
    global execute
    global command
    # print 'In Cli handle \n'
    if len(up_dest and upload):
        # print('Write file invoked')
        f_buf = ""

        while True:
            data = cli_soc.recv(1024)
            # print ('Data received')
            if not data:
                break
            else:
                f_buf += data

        print f_buf
        try:
            f_desc = open(up_dest, 'wb')
            f_desc.write(f_buf)
            f_desc.close()

            cli_soc.send('Successful save: %s\r\n' % up_dest)
        except:
            cli_soc.send('Failure to save file: %s\r\n' % up_dest)

    if(len(execute)):
        # print('Excute invoked')
        out = run_command(execute)
        cli_soc.send(out)
    if command:
        while True:
            # print ('Command inovoke')
            cmd_buf = ""
            while '\n' not in cmd_buf:
                cmd_buf += cli_soc.recv(1024)

            resp = run_command(cmd_buf)
            cli_soc.send(resp)


main()
