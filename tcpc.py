import socket

class TCPC:
	def __init__(self, typ):
		self.type=typ

		self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.response = None
		self.site = None
		self.port = None
class TCPC_CLIENT(TCPC):
	"Client side Code"
	def __init__(self, typ):
		TCPC.__init__(self, typ)
	#TCP	
	def connect(self,site,port):
		print 'connecting to '+site+':',port
		self.site = site
		self.port = port
		if self.type == 't':
			self.client.connect((site,port))		
		elif self.type == 'u':
			self.site = site
			self.port = port
			self.client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	def s(self,suburl,headers):
		req = None
		if self.type =='t':
			if headers==None:
				req ='GET '+suburl+' HTTP/1.1\r\nHost: '+self.site+'\r\n\r\n'
			print 'TCP REQUEST: '+req

			print '------Resp------'
			self.client.send(req)	
			self.response = self.client.recv(4096);
			print self.response
		elif self.type=='u':
			if headers==None:
				req ='GET '+suburl+' HTTP/1.1\r\nHost: '+self.site+'\r\n\r\n'
			print 'UDP REQUEST: '+req
			self.client.sendto(req,(self.site,self.port))

			data, addr = self.client.recvfrom(4096)
			print '------Resp------'
			print data
			
	#Server side Code
class TCPC_SERVER(TCPC):
	import threading

	def __init__(self,typ,ip,port):
		TCPC.__init__(self,typ)
		self.type=typ
		print 'Setting up Server'
		self.ip = ip
		self.port = port
		if self.type == 't':
			self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	#The connection handler
	def con_handle(self,soc):
		req = soc.recv(1024)
		print "[*] Received req: %s" % req
		#Echo
		soc.send(req)
		soc.close()

	def start(self):	
		self.server.bind((self.ip,self.port))
		self.server.listen(5)

		print "[*] Listening on %s:%d" % (self.ip,self.port)

		while True:
			client,addr = self.server.accept()
			print "[*] Accepted con from %s:%d" % (addr[0],addr[1])
			handle = threading.Thread(target=con_handle, args=(client,))

